proj 1

at the beginning, type in command line `make check`, the result is as follows:

pass tests/threads/alarm-single
pass tests/threads/alarm-multiple
pass tests/threads/alarm-simultaneous
FAIL tests/threads/alarm-priority
pass tests/threads/alarm-zero
pass tests/threads/alarm-negative
FAIL tests/threads/priority-change
FAIL tests/threads/priority-donate-one
FAIL tests/threads/priority-donate-multiple
FAIL tests/threads/priority-donate-multiple2
FAIL tests/threads/priority-donate-nest
FAIL tests/threads/priority-donate-sema
FAIL tests/threads/priority-donate-lower
FAIL tests/threads/priority-fifo
FAIL tests/threads/priority-preempt
FAIL tests/threads/priority-sema
FAIL tests/threads/priority-condvar
FAIL tests/threads/priority-donate-chain
FAIL tests/threads/mlfqs-load-1
FAIL tests/threads/mlfqs-load-60
FAIL tests/threads/mlfqs-load-avg
FAIL tests/threads/mlfqs-recent-1
pass tests/threads/mlfqs-fair-2
pass tests/threads/mlfqs-fair-20
FAIL tests/threads/mlfqs-nice-2
FAIL tests/threads/mlfqs-nice-10
FAIL tests/threads/mlfqs-block
20 of 27 tests failed.

task 1-1: avoid busy-waiting
In the original implementation of timer_sleep() in devices/timer.c, the current thread that calls this function continuously yields the CPU whenever it gets run, until the required sleep time passes. To avoid busy-waiting, we resort to thread_block () when a thread should sleep. Thus, the thread will not be scheduled until some other thread calls thread_unblock(). A new member remaining_ticks is added to thread structure to recording the remaining sleep time. On each time tick, the time interrupt handler timer_interrupt() will decrement the remaining_ticks for each thread and, when a thread in the blocked state has 0 remaining_ticks, the handler calls thread_unblock() for it.

Note: need to check validity of the value tick. [alarm-zero, alarm-negative]

task 1-2: change the ready list to a priority queue [alarm-priority]
When we finish task 1-1, all test cases beginning with [alarm-] will pass except the [alarm-priority]. The [alarm-priority] case checks that when the alarm clock wakes up threads, the higher-priority threads run first. So what happens when a thread calls timer_sleep()? In tash 1-1, we implemented thread sleep by putting it to blocked state until it was unblocked by the time interrupt handler. When a thread is unblocked, it changes to the ready state and was put to the ready queue. When a current running thread yield the CPU, the scheduler chooses the next thread to run by popping the front of the ready queue. Therefore, by changing the ready queue to a priority queue where the higher priority threads are in the front, the scheduler will choose the highest priority thread to run next. Later, it is required for us to implement the priority donation. In this case, the priority of thread on the ready queue is dynamic. It is a better approach to modify the function next_thread_to_run() so that the scheduler chooses the highest priority thread.

task 2-1: priority change [priority-change, priority-fifo, priority-preempt]
First, let us deal with this case. In the Pinto guide section 2.2.3, it says 'when a thread is added to the ready list that has a higher priority than the currently running thread, the current thread should immediately yield the processor to the new thread'. Note that when a thread is created, it will be added to the ready list by thread_unblock(). One may think of adding thread_yield() at the end of thread_unblock() to implement such functionality. However, the annotation of thread_unblock() states that 'this function does not preempt the running thread'. Thus, we add thread_yield() at the end of thread_create() and thread_set_priority() instead.

task 2-2: make the semaphore waiter list and condition variable waiter list to priority queue [priority-sema, priority-condvar]

Note: When implementing the priority queue for condition variable, I added a new member waiter_priority to the struct semaphore_elem.

Q: in threads/sync.c cond_wait(), why the struct semaphore_elem waiter need not be malloced?

task 2-3: priority donation
[priority-donate-one]	A    31    lockA
						B    32    wait for lockA
						C    33    wait for lockA
[priority-donate-lower] A    31    lockA
                        B    41    wait for lockA
                        A lower its priority to 21 => do not take effect until release lockA
[priority-donate-multiple]  Main    31    lockA, lockB
							a       32    wait for lockA
							b       33    wait for lockB
							Main releases lockB => Main 32
							Main releases lockA => Main 31
[priority-donate-multiple2]		Main    31    lockA, lockB
								a       34    wait for lockA
								c       32
								b      	36	  wait for lockB
								Main releases lockA => Main 36
								Main releases lockB => Main 31
[priority-donate-chain]    thread[8] with increasing priority
						    thread[i] holds lock[i] and wait for lock[i-1] (i > 0)
						    the priority of thread[7] should propagate to thread
[priority-donate-nest]  L    31    lockA 
						M    32    lockB, wait for lockA
						H    33    wait for lockB
						=> L 33 M 33
						L releases lockA => L 31 M 33
						M releases lockA, lockB => M 32 H 33
						=> H finished
						=> M finished
						=> L finished
[priority-donate-sema]  Main    31
						L       32    lockA, wait for semaphore
						M       34    wait for semaphore
						H       36    wait for lockA, wait for semaphore
						=> L 36
						=> whenever a thread waits for a semaphore, it donates its priority to any other thread that does not wait for this semaphore
						=> Main 36
Note: from the test cases we find that a thread can hold multiple locks, but only wait for at most 1 lock.

When does thread A holding lock(s) lower its priority?
=> all threads waiting for these locks have lower priority than thread A

When thread A releases all the locks, what is its priority?
=> another member priority_original to record the priority before donation.
Note that this value changes when thread_set_priority() is called, and
priority = max(priority, priority_original).

Implementation: 
in struct thread:
    int priority_original: Record the original priority before donation.
    	When a thread has not gone back to its original priority, user program
    	may try to set the thread a new priority. If the new priority is less
    	than the thread priority, we should not update the thread priority because it has received donation that is higher than the new priority. Instead, we update the original priority value so that when the thread returns all donations it received, the priority update takes effect.
    struct lock* lock_waiting: The pointer to the lock that the thread is waiting for. When a thread waits for a lock, it is pushed back to the lock waiter list. As there is only one list element for the waiter list, it is guaranteed that a thread can wait for at most 1 lock.
    struct list lock_list: A list of locks that the thread is holding. This is useful in the case where a thread received multiple donations. At the point the thread releases a lock and returns the highest donation it received, the thread has the donation from the thread with highest priority that is waiting for any lock in the lock list.

Note: 1. When a thread waits for a lock, it donates its priority to the lock holder. The lock holder may be waiting for another lock, so it will donates the priority to the thread holding that lock. When a thread receives a donation, it will only update its priority when the donation is higher than its current value.

task 3: Advanced scheduler

Note: Thread priority is calucated initially at thread initialization and recalculated once every fourth time tick.


pass tests/threads/mlfqs-block
pass tests/threads/alarm-single
pass tests/threads/alarm-multiple
pass tests/threads/alarm-simultaneous
pass tests/threads/alarm-priority
pass tests/threads/alarm-zero
pass tests/threads/alarm-negative
pass tests/threads/priority-change
pass tests/threads/priority-donate-one
pass tests/threads/priority-donate-multiple
pass tests/threads/priority-donate-multiple2
pass tests/threads/priority-donate-nest
pass tests/threads/priority-donate-sema
pass tests/threads/priority-donate-lower
pass tests/threads/priority-fifo
pass tests/threads/priority-preempt
pass tests/threads/priority-sema
pass tests/threads/priority-condvar
pass tests/threads/priority-donate-chain
pass tests/threads/mlfqs-load-1
pass tests/threads/mlfqs-load-60
pass tests/threads/mlfqs-load-avg
pass tests/threads/mlfqs-recent-1
pass tests/threads/mlfqs-fair-2
pass tests/threads/mlfqs-fair-20
pass tests/threads/mlfqs-nice-2
pass tests/threads/mlfqs-nice-10
pass tests/threads/mlfqs-block
All 27 tests passed.


threads/vaddr.h
1. ptov(), vtop()
Q: Why does Pintos implement a physical frame address to kernel virtual address mapping?
A: [Pintos guide 4.1.2.2] 80x86 does not provide any way to access memory at a physical address

threads/thread.c
2. running_thread()
Q: How does the OS locate the current running thread?
A: Each thread structure is stored in its own 4KB page. The CPU's stack pointer tells the current stack's top, which is somewhere in the middle of a thread's page. Since 'struct thread' is always at the beginning of a page, by rounding it down, the thread can be located.

threads/palloc.c
3. palloc_get_multiple()
Q: How does the OS allocate consecutive free pages?
Pintos system memory is divided into kernel and user pools.
The user pool is for user memory pages and kernel pool for everything else.
By default, system memory is evenly devided into these two pools.
A memory pool contains a bitmap for free pages. When palloc_get_multiple() is called for allocating k pages, it scans the bitmap for k consecutive elements that are marked as true (which indicates that corresponding pages are available) and gets the index of the first available bit. Then the starting address of the first available page can be calculated because the pool base address, number of pages(i.e, k) and the page size are known. The function sets these k bits on the bitmap to false and returns the starting address of the first page allocated. 

threads/malloc.c
4. malloc()
Q: How does malloc() work?
First let's read the description of malloc() implementation:
/*
	The size of each request, in bytes, is rounded up to a power
   of 2 and assigned to the "descriptor" that manages blocks of
   that size.  The descriptor keeps a list of free blocks.  If
   the free list is nonempty, one of its blocks is used to
   satisfy the request.

   	Otherwise, a new page of memory, called an "arena", is
   obtained from the page allocator (if none is available,
   malloc() returns a null pointer).  The new arena is divided
   into blocks, all of which are added to the descriptor's free
   list.  Then we return one of the new blocks.
*/
There are two cases depending on how much memory is requested.
(i) If the memory requested is smaller than 1KB,
Pintos maintains an array of block descriptors. Each descriptor contains a member block_size describing the size of block elements, and a list of free blocks. The size of blocks elements are 16B, 32B, ..., 1KB. On requesting x memory, x is rounded up to the nearest power of 2, say y. Then we check the block descriptor whose block_size is y. If the list of free blocks is not empty, the function malloc() returns one of the free blocks. Otherwise, palloc_get_multiple() is called for allocating a new page (the term for this page is "arena"). The arena consists a struct and the remaing are blocks.

+--------------+ 0
| struct arena |
| some members |
|--------------|
| block 1      |
|--------------|
| block 2      |
|--------------|
| ...          |
|              |
+--------------+ 4KB

These blocks in the arena are added to the free list in block descriptor. So now the list is not empty.

(ii) If the memory requested is no less than 1KB,
The requested memory, x is rounded up to the nearest multiple of page size. malloc() essentially calls palloc_get_multiple().


Q: Is malloc() thread-safe?
Yes. Each block descriptor has a lock so that no two processes that requests the same amount of block memory can access the block descriptor simultaneously. The page allocation process guarantees thread-safety by locks in both user and kernel pools.

Q: Are there any cases where malloc() may result in poor utilization of memory?
Yes. For example, if we request for (page size + 1B) memory, malloc() actually allocates (2 * page size) for us.

5. free()
Q: How does the OS detect the behavior that memory is still used after it has already been freed?
A: By setting the freed memory to 0xcc, which can help detect use-after-free bugs.

threads/init.c & threads/pte.h
6. paging_init()
Q: What does paging_init() do?
A: (1) Get one page as page directory which stores page directory entries (PDE). Every PDE may points to a page table. Since the page size is 4KB and a PDE is 32-bit address, there are at most 1024 PDEs.
   (2) Create page directory entries and page table entries (PTE). Each PDE/PTE consists of 20-bit physical address and 12-bit flag bits.
   (3) Store the physical address of the page directory into CR3.



proj 2

at the beginning, type in command line `make check`, the result is as follows:

FAIL tests/userprog/args-none
FAIL tests/userprog/args-single
FAIL tests/userprog/args-multiple
FAIL tests/userprog/args-many
FAIL tests/userprog/args-dbl-space
FAIL tests/userprog/sc-bad-sp
FAIL tests/userprog/sc-bad-arg
FAIL tests/userprog/sc-boundary
FAIL tests/userprog/sc-boundary-2
FAIL tests/userprog/halt
FAIL tests/userprog/exit
FAIL tests/userprog/create-normal
FAIL tests/userprog/create-empty
FAIL tests/userprog/create-null
FAIL tests/userprog/create-bad-ptr
FAIL tests/userprog/create-long
FAIL tests/userprog/create-exists
FAIL tests/userprog/create-bound
FAIL tests/userprog/open-normal
FAIL tests/userprog/open-missing
FAIL tests/userprog/open-boundary
FAIL tests/userprog/open-empty
FAIL tests/userprog/open-null
FAIL tests/userprog/open-bad-ptr
FAIL tests/userprog/open-twice
FAIL tests/userprog/close-normal
FAIL tests/userprog/close-twice
FAIL tests/userprog/close-stdin
FAIL tests/userprog/close-stdout
FAIL tests/userprog/close-bad-fd
FAIL tests/userprog/read-normal
FAIL tests/userprog/read-bad-ptr
FAIL tests/userprog/read-boundary
FAIL tests/userprog/read-zero
FAIL tests/userprog/read-stdout
FAIL tests/userprog/read-bad-fd
FAIL tests/userprog/write-normal
FAIL tests/userprog/write-bad-ptr
FAIL tests/userprog/write-boundary
FAIL tests/userprog/write-zero
FAIL tests/userprog/write-stdin
FAIL tests/userprog/write-bad-fd
FAIL tests/userprog/exec-once
FAIL tests/userprog/exec-arg
FAIL tests/userprog/exec-multiple
FAIL tests/userprog/exec-missing
FAIL tests/userprog/exec-bad-ptr
FAIL tests/userprog/wait-simple
FAIL tests/userprog/wait-twice
FAIL tests/userprog/wait-killed
FAIL tests/userprog/wait-bad-pid
FAIL tests/userprog/multi-recurse
FAIL tests/userprog/multi-child-fd
FAIL tests/userprog/rox-simple
FAIL tests/userprog/rox-child
FAIL tests/userprog/rox-multichild
FAIL tests/userprog/bad-read
FAIL tests/userprog/bad-write
FAIL tests/userprog/bad-read2
FAIL tests/userprog/bad-write2
FAIL tests/userprog/bad-jump
FAIL tests/userprog/bad-jump2
FAIL tests/userprog/no-vm/multi-oom
FAIL tests/filesys/base/lg-create
FAIL tests/filesys/base/lg-full
FAIL tests/filesys/base/lg-random
FAIL tests/filesys/base/lg-seq-block
FAIL tests/filesys/base/lg-seq-random
FAIL tests/filesys/base/sm-create
FAIL tests/filesys/base/sm-full
FAIL tests/filesys/base/sm-random
FAIL tests/filesys/base/sm-seq-block
FAIL tests/filesys/base/sm-seq-random
FAIL tests/filesys/base/syn-read
FAIL tests/filesys/base/syn-remove
FAIL tests/filesys/base/syn-write
76 of 76 tests failed.


task1.1 implement a simple `process_wait()` using semaphore
Q. When the main thread calls `init_thread()`, `malloc()` fails.
A. In `threads/init.c`, `malloc_init()` is called after `thread_init()`.
Solution. Call `malloc()` for the semaphore in `process_wait()`.

task1.2 pass the file name to `thread_create()` and `filesys_open()` (in the 
function `load()`)
Note: the argument file_name in `process_execute()` is the raw file name, which
consists file name and all the arguments.

Now you can see the error message:
'''bash
+ Page fault at 0xc0000008: rights violation error reading page in user context.
+ args-none: dying due to interrupt 0x0e (#PF Page-Fault Exception).
when you run a test (for example, `args-many`)
'''

task1.3 set up the stack
(please refer to the official guide: https://web.stanford.edu/class/cs140/projects/pintos/pintos_3.html#SEC51)

Write the executable name (i.e, the first argument), arguments and their address onto the stack.
The stack should look like:

  low address
      |         [4 zero bytes] [number of arguments] [align bytes] [address of *]
      |         *[address of 1st arguments] ... [address of xth arguments]
      |         [4 zero bytes] [align bytes] [1st argument] ... [xth argument]
     \|/         
  high address

      Note: 1. by adding the size of all arguments and align bytes, the size (in bytes)
            should be a multiple of 4. (align bytes should be 0, 1, 2 or 3)
            2. addresses should be little endian

After finishing setting up the stack, run the test `args-many` and you can see:
'''bash
+ system call!
'''

`token = strtok_r(s1, s2, saveptr)`
Note: 1. Don't `free(s1)` if you are still using `token`
      2. `strtok_r()` modifies `s1` even if it is `const char *`

task 1-4. implement a simple form of syscall `exit()`
in userprog/syscall.c,
'''c
static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  printf ("system call!\n");
  thread_exit ();
}
'''
The user process calls `exit()` handled by the system call handler in the kernel.
Now we register for a syscall `exit()`
'''c
switch(*(int*)f->esp)
  {
  	case SYS_EXIT:
  	{
  		int status = *((int*)f->esp + 1);
  		printf("%s: exit(%d)\n", thread_current ()->name, status);
  		thread_exit ();
  	}
  }
'''

task1.5 implement `write()` syscall to write to STDOUT_FILENO
Use the function `putbuf()` defined in `stdio.h`

Now you can pass all `args-` tests.

task2.1 check validity of pointer passed to syscalls
Three requirements should be satisfied:
   1. Not a NULL pointer
   2. Pointing to user virtual address space
   3. In the user process page directory (i.e, the virtual memory is mapped) 

task2.2 implement other sys calls except `exec()`, `wait()` and `exit()`
Note: You must synchronize system calls so that any number of user processes can make them at once. In particular, it is not safe to call into the file system code provided in the ‘filesys’ directory from multiple threads at once. Your system call implementation must treat the file system code as a critical section. Don’t forget that `process_execute()` also accesses files. For now, we recommend against modifying code in the ‘filesys’ directory.

task2.3 implement `exec()`, `wait()` and `exit()`

task2.4 handle page faults caused by user program directly accessing an invalid page
corresponding test cases: `bad-`

task2.5 deny write to running executables 
corresponding test cases: `rox-`

Note: Executables that are not running can be modified

task3 `multi-oom` test case

"crashed child should return -1"
check whether user process exits with -1 when it causes a page fault


"expected depth: x, actual depth: y"
check whether all malloc and palloc resources are freed when they are no longer used


pass tests/filesys/base/syn-write
pass tests/userprog/args-none
pass tests/userprog/args-single
pass tests/userprog/args-multiple
pass tests/userprog/args-many
pass tests/userprog/args-dbl-space
pass tests/userprog/sc-bad-sp
pass tests/userprog/sc-bad-arg
pass tests/userprog/sc-boundary
pass tests/userprog/sc-boundary-2
pass tests/userprog/halt
pass tests/userprog/exit
pass tests/userprog/create-normal
pass tests/userprog/create-empty
pass tests/userprog/create-null
pass tests/userprog/create-bad-ptr
pass tests/userprog/create-long
pass tests/userprog/create-exists
pass tests/userprog/create-bound
pass tests/userprog/open-normal
pass tests/userprog/open-missing
pass tests/userprog/open-boundary
pass tests/userprog/open-empty
pass tests/userprog/open-null
pass tests/userprog/open-bad-ptr
pass tests/userprog/open-twice
pass tests/userprog/close-normal
pass tests/userprog/close-twice
pass tests/userprog/close-stdin
pass tests/userprog/close-stdout
pass tests/userprog/close-bad-fd
pass tests/userprog/read-normal
pass tests/userprog/read-bad-ptr
pass tests/userprog/read-boundary
pass tests/userprog/read-zero
pass tests/userprog/read-stdout
pass tests/userprog/read-bad-fd
pass tests/userprog/write-normal
pass tests/userprog/write-bad-ptr
pass tests/userprog/write-boundary
pass tests/userprog/write-zero
pass tests/userprog/write-stdin
pass tests/userprog/write-bad-fd
pass tests/userprog/exec-once
pass tests/userprog/exec-arg
pass tests/userprog/exec-multiple
pass tests/userprog/exec-missing
pass tests/userprog/exec-bad-ptr
pass tests/userprog/wait-simple
pass tests/userprog/wait-twice
pass tests/userprog/wait-killed
pass tests/userprog/wait-bad-pid
pass tests/userprog/multi-recurse
pass tests/userprog/multi-child-fd
pass tests/userprog/rox-simple
pass tests/userprog/rox-child
pass tests/userprog/rox-multichild
pass tests/userprog/bad-read
pass tests/userprog/bad-write
pass tests/userprog/bad-read2
pass tests/userprog/bad-write2
pass tests/userprog/bad-jump
pass tests/userprog/bad-jump2
pass tests/userprog/no-vm/multi-oom
pass tests/filesys/base/lg-create
pass tests/filesys/base/lg-full
pass tests/filesys/base/lg-random
pass tests/filesys/base/lg-seq-block
pass tests/filesys/base/lg-seq-random
pass tests/filesys/base/sm-create
pass tests/filesys/base/sm-full
pass tests/filesys/base/sm-random
pass tests/filesys/base/sm-seq-block
pass tests/filesys/base/sm-seq-random
pass tests/filesys/base/syn-read
pass tests/filesys/base/syn-remove
pass tests/filesys/base/syn-write
All 76 tests passed.

[EOF]